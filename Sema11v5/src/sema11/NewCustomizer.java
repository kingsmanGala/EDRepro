/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Beans/Customizer.java to edit this template
 */
package sema11;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.Set;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.*;
import java.util.List;


/**
 *
 * @author HOME
 */
public class NewCustomizer extends javax.swing.JPanel implements java.beans.Customizer {

    private Object bean;
    private final DefaultListModel<String> listModel;

    private Clip clip; // Objeto para reproducir el audio
    private final String rutaArchivo = "C:\\Users\\caguilarvi\\Downloads\\Sema11v5\\Sema11v5\\nombres_listas.txt";

    private int indiceCancionActual = -1;
    private String listaActual = null;
    

    /**
     * Creates new customizer NewCustomizer
     */
    public NewCustomizer() {
        initComponents();
        listModel = new DefaultListModel<>();
        ListaListas.setModel(listModel);
        cargarNombresListas();

    }

    @Override
    public void setObject(Object bean) {
        this.bean = bean;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Reanudar = new javax.swing.JButton();
        Anterior = new javax.swing.JButton();
        Detener = new javax.swing.JButton();
        Siguiente = new javax.swing.JButton();
        BotonListas = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        EliminarLista = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        NombreCanciones = new javax.swing.JList<>();
        AñadirLista = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        AñadirCancion = new javax.swing.JButton();
        MoverCancion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaListas = new javax.swing.JList<>();
        EliminarCancion1 = new javax.swing.JButton();
        MostrarCanciones = new javax.swing.JButton();
        BusquedaBoton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));

        Reanudar.setText("Reanudar");
        Reanudar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReanudarActionPerformed(evt);
            }
        });

        Anterior.setText("Anterior");
        Anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnteriorActionPerformed(evt);
            }
        });

        Detener.setText("Detener");
        Detener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetenerActionPerformed(evt);
            }
        });

        Siguiente.setText("Siguiente");
        Siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteActionPerformed(evt);
            }
        });

        BotonListas.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        BotonListas.setText("Listas");
        BotonListas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonListasActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setText("Listas");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel2.setText("Reproductor EDD");

        EliminarLista.setText("Eliminar Lista");
        EliminarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarListaActionPerformed(evt);
            }
        });

        NombreCanciones.setBorder(null);
        NombreCanciones.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(NombreCanciones);

        AñadirLista.setText("Añadir Lista");
        AñadirLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirListaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel3.setText("Nombres De Canciones");

        AñadirCancion.setText("Añadir Canción");
        AñadirCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirCancionActionPerformed(evt);
            }
        });

        MoverCancion.setText("Cambiar de Lista");
        MoverCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoverCancionActionPerformed(evt);
            }
        });

        ListaListas.setForeground(new java.awt.Color(51, 51, 51));
        ListaListas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ListaListas);

        EliminarCancion1.setText("Eliminar Canción");
        EliminarCancion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarCancion1ActionPerformed(evt);
            }
        });

        MostrarCanciones.setText("Mostrar Canciones");
        MostrarCanciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarCancionesActionPerformed(evt);
            }
        });

        BusquedaBoton.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        BusquedaBoton.setText("Buscar");
        BusquedaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BusquedaBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(AñadirCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(129, 129, 129)
                                                .addComponent(jLabel3))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(654, 654, 654)
                                                .addComponent(EliminarCancion1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AñadirLista, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(EliminarLista, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MostrarCanciones, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(75, 75, 75)
                                .addComponent(Anterior)
                                .addGap(18, 18, 18)
                                .addComponent(Detener)
                                .addGap(18, 18, 18)
                                .addComponent(Reanudar)
                                .addGap(18, 18, 18)
                                .addComponent(Siguiente)
                                .addGap(184, 184, 184)
                                .addComponent(MoverCancion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BotonListas, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BusquedaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(BotonListas, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BusquedaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(AñadirCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(EliminarCancion1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(AñadirLista)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Anterior)
                                            .addComponent(Detener)
                                            .addComponent(Reanudar)
                                            .addComponent(Siguiente)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(EliminarLista)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(MostrarCanciones))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(MoverCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void MoverCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoverCancionActionPerformed
    int indiceSeleccionadoCancion = NombreCanciones.getSelectedIndex();

    if (indiceSeleccionadoCancion != -1) {
        
        String cancionSeleccionada = NombreCanciones.getModel().getElementAt(indiceSeleccionadoCancion);

        
        String[] opcionesLista = obtenerNombresListas();

        
        String listaDestino = (String) JOptionPane.showInputDialog(
                this, "Seleccione la lista a la que desea mover la canción:",
                "Mover Canción", JOptionPane.PLAIN_MESSAGE, null, opcionesLista, opcionesLista[0]);

        if (listaDestino != null) {
            String nombreArchivoListaDestino = "lista_" + listaDestino.toLowerCase().replace(" ", "_") + ".txt";

            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivoListaDestino, true))) {
                writer.write(cancionSeleccionada);
                writer.newLine();
                JOptionPane.showMessageDialog(this, "La canción se ha movido a la lista " + listaDestino + ".", "Canción Movida", JOptionPane.INFORMATION_MESSAGE);

                
                eliminarCancionDeListaActual(indiceSeleccionadoCancion);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al mover la canción: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona una canción para mover.", "No se ha seleccionado ninguna canción", JOptionPane.WARNING_MESSAGE);
    }
}

private void eliminarCancionDeListaActual(int indiceCancion) {
    int indiceLista = ListaListas.getSelectedIndex();
    if (indiceLista != -1) {
        String nombreLista = listModel.getElementAt(indiceLista);
        String nombreArchivoLista = "lista_" + nombreLista.toLowerCase().replace(" ", "_") + ".txt";

        try {
            
            List<String> canciones = Files.readAllLines(Paths.get(nombreArchivoLista), StandardCharsets.UTF_8);

            canciones.remove(indiceCancion);

            Files.write(Paths.get(nombreArchivoLista), canciones, StandardCharsets.UTF_8);

            DefaultListModel<String> modeloCanciones = (DefaultListModel<String>) NombreCanciones.getModel();
            modeloCanciones.removeElementAt(indiceCancion);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la canción de la lista: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna lista.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_MoverCancionActionPerformed

    private void AñadirCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirCancionActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String selectedFilePath = selectedFile.getAbsolutePath();

            // Mostrar las listas existentes y permitir al usuario seleccionar una
            String[] listNames = obtenerNombresListas();
            String selectedList = (String) JOptionPane.showInputDialog(
                    this, "Seleccione una lista:", "Agregar a lista",
                    JOptionPane.PLAIN_MESSAGE, null, listNames, listNames[0]);
            if (selectedList != null) {
                // Guardar la canción en la lista seleccionada
                guardarCancionEnLista(selectedList, selectedFilePath);

                // Cargar la canción para reproducción
                cargarAudio(selectedFilePath);  // Asegúrate de que este método exista y cargue el archivo correctamente
            }
        }

    }//GEN-LAST:event_AñadirCancionActionPerformed

    private void AñadirListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirListaActionPerformed

        String nombreLista = JOptionPane.showInputDialog(this, "Ingrese el nombre de la lista:");
        if (nombreLista != null && !nombreLista.isEmpty()) {
            // Verificar si ya existe una lista con el mismo nombre (ignorando mayúsculas y minúsculas)
            String nombreListaLower = nombreLista.toLowerCase(); // Convertir el nombre a minúsculas
            boolean listaExistente = false;
            for (int i = 0; i < listModel.size(); i++) {
                String nombreExistente = listModel.getElementAt(i);
                if (nombreExistente.equalsIgnoreCase(nombreListaLower)) {
                    listaExistente = true;
                    break;
                }
            }
            if (!listaExistente) {
                listModel.addElement(nombreLista); // Agrega el nombre de la lista al modelo de datos
                ListaListas.setModel(listModel); // Actualiza el modelo de datos en la lista de listas
                guardarNombresListas(); // Guarda los nombres de las listas en el archivo
                crearArchivoLista(nombreLista); // Crea el archivo correspondiente a la nueva lista
            } else {
                JOptionPane.showMessageDialog(this, "Ya existe una lista con ese nombre.");
            }
        }
    }//GEN-LAST:event_AñadirListaActionPerformed

    private void EliminarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarListaActionPerformed
        int indiceSeleccionado = ListaListas.getSelectedIndex();
        if (indiceSeleccionado != -1) {
            String listaSeleccionada = listModel.getElementAt(indiceSeleccionado);
            if (!listaSeleccionada.equals("Lista General")) {
                int opcion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar la lista " + listaSeleccionada + "?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                if (opcion == JOptionPane.YES_OPTION) {
                    eliminarArchivoLista(listaSeleccionada); // Elimina el archivo correspondiente a la lista
                    listModel.removeElementAt(indiceSeleccionado); // Elimina el nombre de la lista del modelo de datos
                    ListaListas.setModel(listModel); // Actualiza el modelo de datos en la lista de listas
                    guardarNombresListas(); // Guarda los nombres de las listas en el archivo
                }
            } else {
                JOptionPane.showMessageDialog(this, "La lista 'Lista General' no se puede eliminar.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una lista para eliminar.");
        }
    }//GEN-LAST:event_EliminarListaActionPerformed

    private void mostrarCancionActual() {
        String listaFileName = "lista_" + listaActual.toLowerCase().replace(" ", "_") + ".txt";
        try (BufferedReader reader = new BufferedReader(new FileReader(listaFileName))) {
            for (int i = 0; i <= indiceCancionActual; i++) {
                String song = reader.readLine();
                if (i == indiceCancionActual) {
                    cargarAudio(song);
                    break;
                }
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "No se encontró el archivo de la lista.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void SiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteActionPerformed
        
        if (indiceCancionActual != -1 && listaActual != null) {
            if (clip != null && clip.isRunning()) {
                clip.stop(); // Detiene la reproducción de la canción anterior
            }
            String listaFileName = "lista_" + listaActual.toLowerCase().replace(" ", "_") + ".txt";
            try (BufferedReader reader = new BufferedReader(new FileReader(listaFileName))) {
                String song;
                int i = 0;
                while ((song = reader.readLine()) != null) {
                    if (i == indiceCancionActual + 1) {
                        cargarAudio(song);
                        NombreCanciones.setSelectedIndex(i);
                        clip.start(); // Inicia la reproducción de la nueva canción
                        break;
                    }
                    i++;
                }
                indiceCancionActual++;
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this, "No se encontró el archivo de la lista.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_SiguienteActionPerformed


    private void DetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetenerActionPerformed

        if (clip != null) {
            if (clip.isRunning()) {
                clip.stop(); // Detiene la reproducción del clip de audio.
                clip.setMicrosecondPosition(0); // Opcionalmente, reinicia la posición del clip al inicio.
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay una canción en reproducción para detener.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_DetenerActionPerformed

    private void AnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnteriorActionPerformed
        if (indiceCancionActual != -1 && listaActual != null) {
            if (clip != null && clip.isRunning()) {
                clip.stop(); // Detiene la reproducción de la canción actual
            }
            String listaFileName = "lista_" + listaActual.toLowerCase().replace(" ", "_") + ".txt";
            try (BufferedReader reader = new BufferedReader(new FileReader(listaFileName))) {
                String song;
                int i = 0;
                while ((song = reader.readLine()) != null) {
                    if (i == indiceCancionActual - 1) {
                        cargarAudio(song);
                        NombreCanciones.setSelectedIndex(i);
                        clip.start(); // Inicia la reproducción de la canción anterior
                        break;
                    }
                    i++;
                }
                indiceCancionActual--;
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "No se encontró el archivo de la lista.");
            }
        }
    }//GEN-LAST:event_AnteriorActionPerformed


    private void ReanudarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReanudarActionPerformed

        if (clip != null) {
            if (!clip.isRunning()) {
                clip.start(); // Comienza o reanuda la reproducción del clip de audio.
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay una canción cargada para reproducir.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_ReanudarActionPerformed

    private void EliminarCancion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarCancion1ActionPerformed
        int listaElejida = ListaListas.getSelectedIndex();
        int cancionActual = NombreCanciones.getSelectedIndex();//Seleccionar Cancion a Eliminar
        if (listaElejida != -1 && cancionActual != -1) {
            String listaActual = listModel.getElementAt(listaElejida);
            String listaFileName = "lista_" + listaActual.toLowerCase().replace(" ", "_") + ".txt";
            try {
                var canciones = Files.readAllLines(Paths.get(listaFileName), StandardCharsets.UTF_8);
                if (cancionActual < canciones.size()) {
                    String cancionAEliminar = canciones.remove(cancionActual);
                    // Guarda las canciones restantes en el archivo
                    Files.write(Paths.get(listaFileName), canciones, StandardCharsets.UTF_8);
                    // Actualiza la lista de canciones
                    DefaultListModel<String> songModel = new DefaultListModel<>();
                    for (String cancion : canciones) {
                        songModel.addElement(cancion);
                    }
                    NombreCanciones.setModel(songModel);
                    JOptionPane.showMessageDialog(this, "Se eliminó la canción: " + cancionAEliminar);
                } else {
                    JOptionPane.showMessageDialog(this, "El índice de la canción seleccionada es inválido.");
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer o escribir en el archivo de la lista.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una lista y una canción para eliminar.");
        }
    }//GEN-LAST:event_EliminarCancion1ActionPerformed

    private void MostrarCancionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarCancionesActionPerformed

        int indiceSeleccionado = ListaListas.getSelectedIndex();
        if (indiceSeleccionado != -1) {
            listaActual = listModel.getElementAt(indiceSeleccionado); // Guarda el nombre de la lista actual
            String listaFileName = "lista_" + listaActual.toLowerCase().replace(" ", "_") + ".txt";

            try (BufferedReader reader = new BufferedReader(new FileReader(listaFileName))) {
                DefaultListModel<String> songModel = new DefaultListModel<>();
                String cancion;
                while ((cancion = reader.readLine()) != null) {
                    songModel.addElement(cancion);
                }
                NombreCanciones.setModel(songModel);
                // Establece el índice de la primera canción
                if (!songModel.isEmpty()) {
                    indiceCancionActual = 0;
                    NombreCanciones.setSelectedIndex(indiceCancionActual); // Selección visual en la lista de GUI
                    cargarAudio(songModel.get(0)); // Cargar la primera canción para reproducirla o mostrarla
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "No se encontró el archivo de la lista.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una lista para mostrar sus canciones.");
        }

    }//GEN-LAST:event_MostrarCancionesActionPerformed

    private void BotonListasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonListasActionPerformed
    String[] opciones = obtenerNombresListas();
    String nombreLista = (String) JOptionPane.showInputDialog(this, "Selecciona una lista:", "Listas Disponibles", JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
    if (nombreLista != null && !nombreLista.isEmpty()) {
        mostrarInformacionLista(nombreLista);
    } else {
        JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna lista.", "Lista no seleccionada", JOptionPane.WARNING_MESSAGE);
    }
}

private void mostrarInformacionLista(String nombreLista) {
    String nombreArchivoLista = "lista_" + nombreLista.toLowerCase().replace(" ", "_") + ".txt";
    try (BufferedReader reader = new BufferedReader(new FileReader(nombreArchivoLista))) {
        StringBuilder contenidoLista = new StringBuilder();
        String cancion;
        while ((cancion = reader.readLine()) != null) {
            contenidoLista.append(cancion).append("\n");
        }
        JOptionPane.showMessageDialog(this, "Información de la lista '" + nombreLista + "':\n" + contenidoLista.toString(), "Información de la Lista", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error al leer el archivo de la lista: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BotonListasActionPerformed

    private void BusquedaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BusquedaBotonActionPerformed
            BusquedaCancion newframe = new BusquedaCancion();

        newframe.setVisible(true);
        
        

        
    }//GEN-LAST:event_BusquedaBotonActionPerformed

//ListasListas ***********************************************
    private void cargarNombresListas() {
        try (BufferedReader reader = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            while ((linea = reader.readLine()) != null) {
                listModel.addElement(linea);
            }
        } catch (FileNotFoundException e) {
            // Si el archivo no existe, lo creamos
            crearArchivo();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void cargarAudio(String rutaArchivo) {

        try {
            File archivoAudio = new File(rutaArchivo);
            if (archivoAudio.exists()) {
                AudioInputStream audioStream = AudioSystem.getAudioInputStream(archivoAudio);
                clip = AudioSystem.getClip();
                clip.open(audioStream);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo de audio no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar el archivo de audio: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void crearArchivo() {
        File archivo = new File(rutaArchivo);
        try {
            archivo.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void guardarNombresListas() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaArchivo))) {
            Set<String> nombres = new HashSet<>(); // Usamos un conjunto para eliminar duplicados
            for (int i = 0; i < listModel.size(); i++) {
                nombres.add(listModel.getElementAt(i));
            }
            // Escribir cada nombre en el archivo
            for (String nombre : nombres) {
                writer.write(nombre);
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void crearArchivoLista(String nombreLista) {
        File listaFile = new File("lista_" + nombreLista + ".txt");
        try {
            listaFile.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void eliminarArchivoLista(String nombreLista) {
        File listaFile = new File("lista_" + nombreLista + ".txt");
        if (listaFile.exists()) {
            listaFile.delete();
        }
    }

    //********************************************************
    //ListaCanciones******************************************
    private String[] obtenerNombresListas() {
        String[] listNames = new String[listModel.size()];
        for (int i = 0; i < listModel.size(); i++) {
            listNames[i] = listModel.getElementAt(i);
        }
        return listNames;
    }

    private void guardarCancionEnLista(String lista, String filePath) {
        String listaFileName = "lista_" + lista.toLowerCase().replace(" ", "_") + ".txt";
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(listaFileName, true))) {
            writer.write(filePath);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }





    
    //********************************************************

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Anterior;
    private javax.swing.JButton AñadirCancion;
    private javax.swing.JButton AñadirLista;
    private javax.swing.JButton BotonListas;
    private javax.swing.JButton BusquedaBoton;
    private javax.swing.JButton Detener;
    private javax.swing.JButton EliminarCancion1;
    private javax.swing.JButton EliminarLista;
    private javax.swing.JList<String> ListaListas;
    private javax.swing.JButton MostrarCanciones;
    private javax.swing.JButton MoverCancion;
    private javax.swing.JList<String> NombreCanciones;
    private javax.swing.JButton Reanudar;
    private javax.swing.JButton Siguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
